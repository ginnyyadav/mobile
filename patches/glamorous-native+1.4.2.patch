diff --git a/node_modules/glamorous-native/README.md b/node_modules/glamorous-native/README.md
index c469fa9..fd884db 100644
--- a/node_modules/glamorous-native/README.md
+++ b/node_modules/glamorous-native/README.md
@@ -9,13 +9,12 @@
 [![Build Status][build-badge]][build]
 [![Code Coverage][coverage-badge]][coverage]
 [![version][version-badge]][package]
-[![MIT License][license-badge]][LICENSE]
+[![MIT License][license-badge]][license]
 [![Semantic Releases][semantic-release-badge]][semantic-release]
 [![PRs Welcome][prs-badge]][prs]
 [![Chat][chat-badge]][chat]
 [![Examples][examples-badge]][examples]
 
-
 ## The Problem
 
 In React Native, we write styles within our JS, but you don't like having to create entire component functions just for styling purposes. You don't want to give a name to something that's purely style-related. And it's kind of annoying to do the `StyleSheet.create`, conditionals, and props-forwarding song and dance.
@@ -26,16 +25,11 @@ For example, this is what you have to do with `StyleSheet`:
 const styles = StyleSheet.create({
   text: {
     fontSize: 20,
-    textAlign: 'center'
+    textAlign: "center"
   }
-})
-function MyStyledText ({style, ...rest}) {
-  return (
-    <Text
-      style={[styles.text, style]}
-      {...rest}
-    />
-  )
+});
+function MyStyledText({ style, ...rest }) {
+  return <Text style={[styles.text, style]} {...rest} />;
 }
 ```
 
@@ -46,8 +40,8 @@ With `glamorous-native`, that example above looks as simple as this:
 ```js
 const MyStyledText = glamorous.text({
   fontSize: 20,
-  textAlign: 'center'
-})
+  textAlign: "center"
+});
 ```
 
 In fact, it's even better, because there are a bunch of features that make composing these components together really nice!
@@ -55,17 +49,14 @@ In fact, it's even better, because there are a bunch of features that make compo
 Oh, and what if you don't care to give `MyStyledText` a name? If you just want a text that's styled using `StyleSheet`? You can do that too:
 
 ```js
-const {Text} = glamorous;
+const { Text } = glamorous;
 
 function Section() {
   return (
-    <Text
-      fontSize={20}
-      textAlign="center"
-    >
+    <Text fontSize={20} textAlign="center">
       Hello world!
     </Text>
-  )
+  );
 }
 ```
 
@@ -86,7 +77,7 @@ This also depends on `react` and `react-native`; you likely already have these d
 From here you can now import this module:
 
 ```js
-import glamorous, {ThemeProvider} from 'glamorous-native'
+import glamorous, { ThemeProvider } from "glamorous-native";
 ```
 
 ### Jest Configuration
@@ -112,7 +103,7 @@ The `glamorous` function is the main (only) export. It allows you to create glam
 
 #### built-in React Native component factories
 
-For every React Native element, there is an associated `glamorous` component factory attached to the `glamorous` function. As above, you can access these factories like so: `glamorous.view`, `glamorous.text`, `glamorous.listView`, etc.
+For every React Native element, there is an associated `glamorous` component factory attached to the `glamorous` function. As above, you can access these factories like so: `glamorous.view`, `glamorous.text`, etc.
 
 ```js
 const MyStyledView = glamorous.view({margin: 1})
@@ -223,9 +214,9 @@ Only props that are safe to forward to the specific element (ie. that will ultim
 A use case for doing something like this would be for dynamic styles:
 
 ```js
-const staticStyles = {color: 'green'}
-const dynamicStyles = props => ({fontSize: props.size === 'big' ? 32 : 24})
-const MyDynamicallyStyledText = glamorous.text(staticStyles, dynamicStyles)
+const staticStyles = { color: "green" };
+const dynamicStyles = props => ({ fontSize: props.size === "big" ? 32 : 24 });
+const MyDynamicallyStyledText = glamorous.text(staticStyles, dynamicStyles);
 ```
 
 > The exception to this prop forwarding is the pre-created `GlamorousComponent`s (see below).
@@ -235,17 +226,19 @@ const MyDynamicallyStyledText = glamorous.text(staticStyles, dynamicStyles)
 Often you want to style something without actually giving it a name (because naming things is hard). So glamorous also expose a pre-created `GlamorousComponent` for each React Native node type which makes this reasonable to do:
 
 ```js
-const {View, Text, TouchableHighlight, Image} = glamorous;
+const { View, Text, TouchableHighlight, Image } = glamorous;
 
-function MyUserInterface ({name, tagline, imageUrl, size, onPress}) {
+function MyUserInterface({ name, tagline, imageUrl, size, onPress }) {
   const nameSize = size;
   const taglineSize = size * 0.5;
 
   return (
     <View flex={1} flexDirection="column" justifyContent="center">
       <TouchableHighlight onPress={onPress} underlayColor="#336479">
-        <Image borderRadius={90} height={180} source={{uri: imageUrl}} />
-        <Text fontSize={nameSize} fontWeight="bold">{name}</Text>
+        <Image borderRadius={90} height={180} source={{ uri: imageUrl }} />
+        <Text fontSize={nameSize} fontWeight="bold">
+          {name}
+        </Text>
       </TouchableHighlight>
       <Text fontSize={taglineSize} color="#767676">
         {tagline}
@@ -260,34 +253,30 @@ Having to name all of this stuff could be tedious, so having these pre-built com
 The `style` prop can be used to provide `StyleSheet` styles:
 
 ```js
-import glamorous, {withTheme} from 'glamorous-native'
-const {View, Text} = glamorous
+import glamorous, { withTheme } from "glamorous-native";
+const { View, Text } = glamorous;
 
 const predefinedStyle = StyleSheet.create({
   view: {
     flex: 1
   },
   text: {
-    color: '#767676',
+    color: "#767676",
     fontSize: 18
   }
-})
+});
 
-const MyUserInterface = withTheme(({tagline, theme}) => (
-  <View style={[predefinedStyle.view, {backgroundColor: theme.primaryColor}]}>
-    <Text style={predefinedStyle.text}>
-      {tagline}
-    </Text>
+const MyUserInterface = withTheme(({ tagline, theme }) => (
+  <View style={[predefinedStyle.view, { backgroundColor: theme.primaryColor }]}>
+    <Text style={predefinedStyle.text}>{tagline}</Text>
   </View>
-))
+));
 ```
 
 One other tip... This totally works:
 
 ```js
-<glamorous.Text color="blue">
-  JSX is pretty wild!
-</glamorous.Text>
+<glamorous.Text color="blue">JSX is pretty wild!</glamorous.Text>
 ```
 
 #### Overriding component styles
@@ -301,7 +290,7 @@ Let's see how that can be done in the examples below.
 We'll use this as our `GlamorousComponent`:
 
 ```js
-const MyStyledText = glamorous.view({margin: 1, fontSize: 1, padding: 1})
+const MyStyledText = glamorous.view({ margin: 1, fontSize: 1, padding: 1 });
 ```
 
 ###### using `style`
@@ -353,11 +342,10 @@ You can also provide a few options to help glamorous know how to handle your com
 The `displayName` of a React component is used by React in the [React DevTools][react-devtools] and is really handy for debugging React applications. Glamorous will do its best to give a good `displayname` for your component, but, for the example above, the best it can do is `glamorous(MyComponent)`. If you want to specify a `displayName`, you can do so with this property. For example:
 
 ```js
-const MyComponent = props => <Text {...props} />
-const myGlamorousComponentFactory = glamorous(
-  MyComponent,
-  {displayName: 'MyGlamorousComponent'}
-)
+const MyComponent = props => <Text {...props} />;
+const myGlamorousComponentFactory = glamorous(MyComponent, {
+  displayName: "MyGlamorousComponent"
+});
 ```
 
 And now all components created by the `myGlamorousComponentFactory` will have the `displayName` of `MyGlamorousComponent`.
@@ -517,34 +505,42 @@ const ThemedSubTitle = withTheme(SubTitle)
 Or if you prefer decorator syntax:
 
 ```jsx
-import React, {Component} from 'react'
-import glamorous, {ThemeProvider,  withTheme} from 'glamorous-native'
+import React, { Component } from "react";
+import glamorous, { ThemeProvider, withTheme } from "glamorous-native";
 
 // our main theme object
 const theme = {
-  main: {color: 'red'}
-}
+  main: { color: "red" }
+};
 
 // a themed <Title> component
-const Title = glamorous.text({
-  fontSize: 10
-}, (props, theme) => ({
-  color: theme.main.color
-}))
+const Title = glamorous.text(
+  {
+    fontSize: 10
+  },
+  (props, theme) => ({
+    color: theme.main.color
+  })
+);
 
 // extended component with theme prop
 @withTheme
 class SubTitle extends Component {
   render() {
-    const {children, theme: {main: {color}}} = this.props
-    return <Text style={{color}}>{children}</Text>
+    const {
+      children,
+      theme: {
+        main: { color }
+      }
+    } = this.props;
+    return <Text style={{ color }}>{children}</Text>;
   }
 }
 
 <ThemeProvider theme={theme}>
   <Title>Hello!</Title>
   <SubTitle>from withTheme!</SubTitle>
-</ThemeProvider>
+</ThemeProvider>;
 ```
 
 > `withTheme` expects a `ThemeProvider` further up the render tree and will warn in `development` if one is not found!
@@ -587,6 +583,7 @@ Parent.childContextTypes = {
 ## Inspiration
 
 This package was inspired by the work from people's work on the following projects:
+
 - [glamorous][glamorous]
 - [styled-components](https://github.com/styled-components/styled-components)
 - [jsxstyle](https://github.com/smyte/jsxstyle)
@@ -595,7 +592,6 @@ This package was inspired by the work from people's work on the following projec
 
 This project is in active development approaching completion. Your contributions are welcome! Take a look at the [contributing guide][contributing] and browse through the [good first task issues](https://github.com/robinpowered/glamorous-native/labels/good%20first%20task).
 
-
 [build-badge]: https://img.shields.io/travis/robinpowered/glamorous-native.svg?style=flat-square
 [build]: https://travis-ci.org/robinpowered/glamorous-native
 [coverage-badge]: https://img.shields.io/codecov/c/github/robinpowered/glamorous-native.svg?style=flat-square
@@ -606,6 +602,7 @@ This project is in active development approaching completion. Your contributions
 [license]: https://github.com/robinpowered/glamorous-native/blob/master/LICENSE
 [prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square
 [prs]: http://makeapullrequest.com
+
 [semantic-release-badge]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square]
 [semantic-release]: https://github.com/robinpowered/glamorous-native/releases
 [examples-badge]: https://img.shields.io/badge/%F0%9F%92%A1-examples-8C8E93.svg?style=flat-square
diff --git a/node_modules/glamorous-native/src/__tests__/glamorous.test.js b/node_modules/glamorous-native/src/__tests__/glamorous.test.js
index 94ec180..e8faf3e 100644
--- a/node_modules/glamorous-native/src/__tests__/glamorous.test.js
+++ b/node_modules/glamorous-native/src/__tests__/glamorous.test.js
@@ -2,7 +2,6 @@ import React from 'react'
 import {
   FlatList,
   Image,
-  ListView,
   ScrollView,
   SectionList,
   Text,
@@ -85,7 +84,6 @@ describe('rootEl', () => {
 describe('default components', () => {
   expect(shallow(<glamorous.FlatList />).find(FlatList)).toBeDefined()
   expect(shallow(<glamorous.Image />).find(Image)).toBeDefined()
-  expect(shallow(<glamorous.ListView />).find(ListView)).toBeDefined()
   expect(shallow(<glamorous.ScrollView />).find(ScrollView)).toBeDefined()
   expect(shallow(<glamorous.SectionList />).find(SectionList)).toBeDefined()
   expect(shallow(<glamorous.Text />).find(Text)).toBeDefined()
diff --git a/node_modules/glamorous-native/src/index.js b/node_modules/glamorous-native/src/index.js
index 58089e0..19f0d9e 100644
--- a/node_modules/glamorous-native/src/index.js
+++ b/node_modules/glamorous-native/src/index.js
@@ -35,7 +35,6 @@ function camelCase(tagName) {
 
 // @TODO: automate the named exports
 export const Image = glamorous.Image
-export const ListView = glamorous.ListView
 export const ScrollView = glamorous.ScrollView
 export const Text = glamorous.Text
 export const TextInput = glamorous.TextInput
diff --git a/node_modules/glamorous-native/src/is-style-prop.js b/node_modules/glamorous-native/src/is-style-prop.js
index 6cfeb0c..ff43f0e 100644
--- a/node_modules/glamorous-native/src/is-style-prop.js
+++ b/node_modules/glamorous-native/src/is-style-prop.js
@@ -2,7 +2,6 @@ import {
   Animated,
   FlatList,
   Image,
-  ListView,
   ScrollView,
   SectionList,
   Text,
@@ -21,7 +20,6 @@ const viewStyleComponents = [
   Animated.ScrollView,
   FlatList,
   Image,
-  ListView,
   ScrollView,
   SectionList,
   Text,
diff --git a/node_modules/glamorous-native/src/react-native-elements.js b/node_modules/glamorous-native/src/react-native-elements.js
index 8c62e10..b3872c8 100644
--- a/node_modules/glamorous-native/src/react-native-elements.js
+++ b/node_modules/glamorous-native/src/react-native-elements.js
@@ -1,7 +1,6 @@
 import {
   FlatList,
   Image,
-  ListView,
   ScrollView,
   SectionList,
   Text,
@@ -16,7 +15,6 @@ import {
 
 export const ReactNativeElementMap = {
   Image,
-  ListView,
   ScrollView,
   Text,
   TextInput,
diff --git a/node_modules/glamorous-native/typings/built-in-component-factories.d.ts b/node_modules/glamorous-native/typings/built-in-component-factories.d.ts
index 791b3e1..d32b6bb 100644
--- a/node_modules/glamorous-native/typings/built-in-component-factories.d.ts
+++ b/node_modules/glamorous-native/typings/built-in-component-factories.d.ts
@@ -7,7 +7,6 @@ import {
   ImageStyle,
   TextInputProperties,
   ImageProperties,
-  ListViewProperties,
   ScrollViewProps,
   TextProperties,
   TouchableHighlightProperties,
@@ -25,7 +24,6 @@ export type NativeGlamorousComponentFactory<
 
 export interface NativeComponentFactory {
   image: NativeGlamorousComponentFactory<ImageProperties, ImageStyle>
-  listView: NativeGlamorousComponentFactory<ListViewProperties, ViewStyle>
   scrollView: NativeGlamorousComponentFactory<ScrollViewProps, ViewStyle>
   text: NativeGlamorousComponentFactory<TextProperties, TextStyle>
   textInput: NativeGlamorousComponentFactory<TextInputProperties, TextStyle>
diff --git a/node_modules/glamorous-native/typings/built-in-glamorous-components.d.ts b/node_modules/glamorous-native/typings/built-in-glamorous-components.d.ts
index 145f51f..ad3d6f9 100644
--- a/node_modules/glamorous-native/typings/built-in-glamorous-components.d.ts
+++ b/node_modules/glamorous-native/typings/built-in-glamorous-components.d.ts
@@ -7,7 +7,6 @@ import {
   ImageStyle,
   TextInputProperties,
   ImageProperties,
-  ListViewProperties,
   ScrollViewProps,
   TextProperties,
   TouchableHighlightProperties,
@@ -22,9 +21,6 @@ export interface NativeComponent {
   Image: React.StatelessComponent<
     ImageProperties & ExtraGlamorousProps & ImageStyle
   >
-  ListView: React.StatelessComponent<
-    ListViewProperties & ExtraGlamorousProps & ViewStyle
-  >
   ScrollView: React.StatelessComponent<
     ScrollViewProps & ExtraGlamorousProps & ViewStyle
   >
